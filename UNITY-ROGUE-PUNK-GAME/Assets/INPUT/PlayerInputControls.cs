//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/INPUT/PlayerInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fd7971ae-9cb3-4a14-96d0-bf9f5d5085a6"",
            ""actions"": [
                {
                    ""name"": ""ATTACK"",
                    ""type"": ""Button"",
                    ""id"": ""95054f9b-8b8a-40e8-b635-0cdaa6ad04d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MOVE"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0eca9e62-4be8-4571-a661-495b04041dde"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DODGE"",
                    ""type"": ""Button"",
                    ""id"": ""bbf2df3e-0df2-4de4-9283-8fd5897ff557"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a73fb69-ede7-4ebb-b12b-cf06c4b05d13"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ATTACK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be25ad07-c206-4c65-8b2d-3271c6417469"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ATTACK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b750298a-749e-4f52-9775-1bbdba2f6652"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ATTACK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ed80cc51-080b-427e-84fb-40c16a8abe01"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""beaa92c6-2630-4070-a9c5-7594da38a91e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a4c99cb-cf87-4dd2-9edc-ac142fe2a136"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""507a9954-abdb-460e-b632-8f696f72237c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1ccd6613-996c-4630-9a17-0b87a5a7a92c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a26fc879-ef60-4551-bbf6-3ad183094c8c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0b8703b-f70a-4759-9a2c-a4fb08472040"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DODGE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e1cc19d-0a09-4d2d-b6d8-c97aa80047c9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DODGE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cb704f2-3982-4436-b53d-1e147b47a56d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DODGE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MENU"",
            ""id"": ""794a469a-282c-4e28-b770-f06f0bdf8cd3"",
            ""actions"": [
                {
                    ""name"": ""QUIT"",
                    ""type"": ""Button"",
                    ""id"": ""665cfdad-8ce7-4371-9f0a-c4fb8ff03edd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RELOAD"",
                    ""type"": ""Button"",
                    ""id"": ""c8f47b70-10fd-4d15-95d3-054d269ee9f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OPTIONS"",
                    ""type"": ""Button"",
                    ""id"": ""5a985b45-3d52-4cb0-a11c-61840c03262f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b39f068-a700-451d-bb80-bde9b833635f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QUIT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""939d1385-8541-47dd-8efb-5426d7870391"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RELOAD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43137567-3bdd-4ef6-9d3e-ec88d882c3d1"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OPTIONS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ATTACK = m_Player.FindAction("ATTACK", throwIfNotFound: true);
        m_Player_MOVE = m_Player.FindAction("MOVE", throwIfNotFound: true);
        m_Player_DODGE = m_Player.FindAction("DODGE", throwIfNotFound: true);
        // MENU
        m_MENU = asset.FindActionMap("MENU", throwIfNotFound: true);
        m_MENU_QUIT = m_MENU.FindAction("QUIT", throwIfNotFound: true);
        m_MENU_RELOAD = m_MENU.FindAction("RELOAD", throwIfNotFound: true);
        m_MENU_OPTIONS = m_MENU.FindAction("OPTIONS", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_ATTACK;
    private readonly InputAction m_Player_MOVE;
    private readonly InputAction m_Player_DODGE;
    public struct PlayerActions
    {
        private @PlayerInputControls m_Wrapper;
        public PlayerActions(@PlayerInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ATTACK => m_Wrapper.m_Player_ATTACK;
        public InputAction @MOVE => m_Wrapper.m_Player_MOVE;
        public InputAction @DODGE => m_Wrapper.m_Player_DODGE;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @ATTACK.started += instance.OnATTACK;
            @ATTACK.performed += instance.OnATTACK;
            @ATTACK.canceled += instance.OnATTACK;
            @MOVE.started += instance.OnMOVE;
            @MOVE.performed += instance.OnMOVE;
            @MOVE.canceled += instance.OnMOVE;
            @DODGE.started += instance.OnDODGE;
            @DODGE.performed += instance.OnDODGE;
            @DODGE.canceled += instance.OnDODGE;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @ATTACK.started -= instance.OnATTACK;
            @ATTACK.performed -= instance.OnATTACK;
            @ATTACK.canceled -= instance.OnATTACK;
            @MOVE.started -= instance.OnMOVE;
            @MOVE.performed -= instance.OnMOVE;
            @MOVE.canceled -= instance.OnMOVE;
            @DODGE.started -= instance.OnDODGE;
            @DODGE.performed -= instance.OnDODGE;
            @DODGE.canceled -= instance.OnDODGE;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // MENU
    private readonly InputActionMap m_MENU;
    private List<IMENUActions> m_MENUActionsCallbackInterfaces = new List<IMENUActions>();
    private readonly InputAction m_MENU_QUIT;
    private readonly InputAction m_MENU_RELOAD;
    private readonly InputAction m_MENU_OPTIONS;
    public struct MENUActions
    {
        private @PlayerInputControls m_Wrapper;
        public MENUActions(@PlayerInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @QUIT => m_Wrapper.m_MENU_QUIT;
        public InputAction @RELOAD => m_Wrapper.m_MENU_RELOAD;
        public InputAction @OPTIONS => m_Wrapper.m_MENU_OPTIONS;
        public InputActionMap Get() { return m_Wrapper.m_MENU; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MENUActions set) { return set.Get(); }
        public void AddCallbacks(IMENUActions instance)
        {
            if (instance == null || m_Wrapper.m_MENUActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MENUActionsCallbackInterfaces.Add(instance);
            @QUIT.started += instance.OnQUIT;
            @QUIT.performed += instance.OnQUIT;
            @QUIT.canceled += instance.OnQUIT;
            @RELOAD.started += instance.OnRELOAD;
            @RELOAD.performed += instance.OnRELOAD;
            @RELOAD.canceled += instance.OnRELOAD;
            @OPTIONS.started += instance.OnOPTIONS;
            @OPTIONS.performed += instance.OnOPTIONS;
            @OPTIONS.canceled += instance.OnOPTIONS;
        }

        private void UnregisterCallbacks(IMENUActions instance)
        {
            @QUIT.started -= instance.OnQUIT;
            @QUIT.performed -= instance.OnQUIT;
            @QUIT.canceled -= instance.OnQUIT;
            @RELOAD.started -= instance.OnRELOAD;
            @RELOAD.performed -= instance.OnRELOAD;
            @RELOAD.canceled -= instance.OnRELOAD;
            @OPTIONS.started -= instance.OnOPTIONS;
            @OPTIONS.performed -= instance.OnOPTIONS;
            @OPTIONS.canceled -= instance.OnOPTIONS;
        }

        public void RemoveCallbacks(IMENUActions instance)
        {
            if (m_Wrapper.m_MENUActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMENUActions instance)
        {
            foreach (var item in m_Wrapper.m_MENUActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MENUActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MENUActions @MENU => new MENUActions(this);
    public interface IPlayerActions
    {
        void OnATTACK(InputAction.CallbackContext context);
        void OnMOVE(InputAction.CallbackContext context);
        void OnDODGE(InputAction.CallbackContext context);
    }
    public interface IMENUActions
    {
        void OnQUIT(InputAction.CallbackContext context);
        void OnRELOAD(InputAction.CallbackContext context);
        void OnOPTIONS(InputAction.CallbackContext context);
    }
}
